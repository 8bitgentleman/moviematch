# Release Process:

# 1. Update RELEASE_NOTES.markdown and bump VERSION
# 2. Create a release with the same text as VERSION plus a `v` prefix
# 3. This workflow with kick in and build a Docker image and upload binaries to the release

name: Release

on:
  push:
    tags:
      - "v2*"
  workflow_dispatch:
    inputs:
      version:
        description: Version
        required: true

jobs:
  build_info:
    name: Get build info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.metadata.outputs.version }}
      prerelease: ${{ steps.metadata.outputs.prerelease }}
      existing_release: ${{ steps.metadata.outputs.existing_release }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Get metadata
        id: metadata
        run: |
          export VERSION="${{ github.event.inputs.version || github.ref }}"
          VERSION="${VERSION#refs/tags/}"
          echo "::set-output name=version::${VERSION}"
          PRERELEASE="$([[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"beta"* ]] && echo "true" || echo "false")"
          echo "::set-output name=prerelease::${PRERELEASE}"
          response=$(curl -s -H "Accept: application/json" https://api.github.com/repos/lukechannings/moviematch/releases)
          EXISTING_RELEASE=$( [[ "$(echo $response | jq ".[]|select(.tag_name==\"${VERSION}\")")" == "" ]] && echo "false" || echo "true" )
          echo "::set-output name=existing_release::${EXISTING_RELEASE}"
      - name: Check we're building the right version
        run: |
          if [[ "v$(cat VERSION)" != "${{steps.metadata.outputs.version}}" ]]; then
            echo "Tag version is "${{steps.metadata.outputs.version}}", but the source code version is "$(cat VERSION)". These need to match!"
            exit 1
          fi
        shell: bash
  build:
    name: Build and publish
    runs-on: ubuntu-latest
    needs: build_info
    timeout-minutes: 60
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Install Deno
        run: |-
          curl -fsSL https://deno.land/x/install/install.sh | sh
          echo "$HOME/.deno/bin" >> $GITHUB_PATH
          export PATH="$DENO_INSTALL/bin:$PATH"
      - name: Install esbuild
        run: |
          GO111MODULE=on go get github.com/evanw/esbuild/cmd/esbuild@v0.8.54
      - name: Tests
        run: ./scripts/test.sh
        env:
          TEST_PLEX_URL: ${{ secrets.TEST_PLEX_URL }}
          TEST_PLEX_TOKEN: ${{ secrets.TEST_PLEX_TOKEN }}
      - name: Get Release Notes
        run: |
          RELEASE_NOTES=$(deno eval -p "(await Deno.readTextFile('./RELEASE_NOTES.markdown')).match(/##\s${{steps.metadata.outputs.version}}(?<notes>(.|\n)*?)^##\s/m)?.groups?.notes?.trim() ?? ''")
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "${RELEASE_NOTES}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        if: ${{ needs.build_info.outputs.existing_release == 'false' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build_info.outputs.version }}
          release_name: ${{ needs.build_info.outputs.version }}
          body: ${{ env.RELEASE_NOTES }}
          prerelease: ${{ needs.build_info.outputs.prerelease == 'true' }}
      - name: Compile MovieMatch
        run: |
          export PATH="$HOME/go/bin:$PATH"
          ./scripts/bundle.sh
        shell: bash
      - name: Upload binaries
        run: |
          set -x
          assets=()
          for target in ./build/*.zip; do
            assets+=("-a" "$target")
          done
          assets+=("-a" "./build/moviematch.bundle.js")
          hub release edit "${assets[@]}" -m "${{ needs.build_info.outputs.version }}" "${{ needs.build_info.outputs.version }}" || true
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./configs/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{needs.build_info.outputs.version}}
          tags: |
            lukechannings/moviematch:${{ needs.build_info.outputs.version }}
            ${{ needs.build_info.outputs.prerelease == 'false' && 'lukechannings/moviematch:latest' || '' }}
