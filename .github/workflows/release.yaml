# Release Process:

# 1. Update RELEASE_NOTES.markdown and bump VERSION
# 2. Create a release with the same text as VERSION plus a `v` prefix
# 3. This workflow with kick in and build a Docker image and upload binaries to the release

name: Release

on:
  push:
    tags:
      - "v2*"
  workflow_dispatch:
    inputs:
      version:
        description: Version
        required: true
      dry_run:
        description: Dry-run
        default: true

jobs:
  build:
    name: compile
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Install Deno
        run: |-
          curl -fsSL https://deno.land/x/install/install.sh | sh
          echo "$HOME/.deno/bin" >> $GITHUB_PATH
          export PATH="$DENO_INSTALL/bin:$PATH"
      - name: Install esbuild
        run: |
          GO111MODULE=on go get github.com/evanw/esbuild/cmd/esbuild@v0.8.54
      - name: Get metadata
        run: |
          export VERSION="${{ github.event.inputs.version || github.ref }}"
          VERSION="${VERSION#refs/tags/}"
          RELEASE_NOTES=$(deno eval -p "(await Deno.readTextFile('./RELEASE_NOTES.markdown')).match(/##\s${VERSION}(?<notes>(.|\n)*?)^##\s/m)?.groups?.notes?.trim() ?? ''")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "${RELEASE_NOTES}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          response=$(curl -s -H "Accept: application/json" https://api.github.com/repos/lukechannings/moviematch/releases)
          EXISTING_RELEASE=$( [[ "$(echo $response | jq ".[]|select(.tag_name==\"${VERSION}\")")" == "" ]] && echo "false" || echo "true" )
          echo "EXISTING_RELEASE=$EXISTING_RELEASE" >> $GITHUB_ENV
          PRERELEASE="$([[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"beta"* ]] && echo "true" || echo "false")"
          echo "PRERELEASE=${PRERELEASE}" >> $GITHUB_ENV
      - name: Check we're building the right version
        run: |
          if [[ "v$(cat VERSION)" != "${{env.VERSION}}" ]]; then
            echo "Tag version is "${{env.VERSION}}", but the source code version is "$(cat VERSION)". These need to match!"
            exit 1
          fi
        shell: bash
      - name: Run tests
        run: ./scripts/test.sh
        env:
          TEST_PLEX_URL: ${{ secrets.TEST_PLEX_URL }}
          TEST_PLEX_TOKEN: ${{ secrets.TEST_PLEX_TOKEN }}
      - name: Has existing release
        if: ${{ env.EXISTING_RELEASE == 'true' }}
        run: |
          echo "Already has a release"
      - name: Create Release
        id: create_release
        if: ${{ env.EXISTING_RELEASE == 'false' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          prerelease: ${{ env.PRERELEASE == 'true' }}
      - name: bundle
        run: |
          export PATH="$HOME/go/bin:$PATH"
          ./scripts/bundle.sh
        shell: bash
      - run: |
          set -x
          assets=()
          for target in ./build/*; do
            zip -r -j ./build/$target.zip ./build/$target
            assets+=("-a" "./build/$target.zip")
          done
          hub release edit "${assets[@]}" -m "${{ env.VERSION }}" "${{ env.VERSION }}"
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
